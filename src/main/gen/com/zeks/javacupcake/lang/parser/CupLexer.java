// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: cup.flex

package com.zeks.javacupcake.lang.parser;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.zeks.javacupcake.lang.psi.CupTypes;


class CupLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SINGLE_LINE_COMMENT = 2;
  public static final int MULTILINE_COMMENT = 4;
  public static final int CODE_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\4\0\1\6\2\0\1\7\1\10\1\11\1\0\1\12"+
    "\1\0\1\13\1\14\12\15\1\16\1\17\1\0\1\20"+
    "\3\0\32\21\1\22\1\0\1\23\1\0\1\15\1\0"+
    "\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\21\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\21\1\42\1\43\1\44\2\21\1\45\3\21\1\46"+
    "\1\47\1\50\7\0\1\3\u01a2\0\2\3\326\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\12\12"+
    "\1\1\1\15\1\16\2\17\1\16\2\20\1\0\1\21"+
    "\1\22\1\0\15\12\1\23\1\24\1\25\1\0\1\26"+
    "\5\12\1\27\10\12\1\0\1\12\1\30\1\12\1\31"+
    "\1\32\6\12\1\33\2\12\1\34\1\35\7\12\1\36"+
    "\1\37\1\12\1\40\1\41\3\12\1\42\4\12\1\43"+
    "\2\12\1\44\2\12\1\45\3\12\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\244\0\315\0\244"+
    "\0\244\0\244\0\244\0\244\0\366\0\u011f\0\244\0\u0148"+
    "\0\244\0\244\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\244\0\244\0\244"+
    "\0\u0334\0\u035d\0\244\0\u0386\0\u03af\0\244\0\244\0\u03d8"+
    "\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\244\0\244\0\244"+
    "\0\u0616\0\244\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854"+
    "\0\u087d\0\u08a6\0\u0148\0\u08cf\0\u0148\0\u0148\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u0148\0\u09ee\0\u0a17\0\u0148"+
    "\0\244\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36"+
    "\0\u0148\0\u0148\0\u0b5f\0\u0148\0\u0148\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0148\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0148\0\u0ca7\0\u0cd0"+
    "\0\u0148\0\u0cf9\0\u0d22\0\u0148\0\u0d4b\0\u0d74\0\u0d9d\0\u0148"+
    "\0\u0148";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\5\1\6\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\5\1\16\1\17\1\5"+
    "\1\20\1\21\1\22\1\23\1\24\5\20\1\25\1\20"+
    "\1\26\1\20\1\27\1\20\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\5\2\37\3\40\1\41\54\37"+
    "\1\42\37\37\16\43\1\44\32\43\112\0\1\45\20\0"+
    "\1\46\2\0\1\47\52\0\1\50\47\0\1\20\3\0"+
    "\1\20\2\0\22\20\20\0\1\20\3\0\1\20\2\0"+
    "\1\20\1\51\20\20\20\0\1\20\3\0\1\20\2\0"+
    "\14\20\1\52\5\20\20\0\1\20\3\0\1\20\2\0"+
    "\12\20\1\53\1\54\6\20\20\0\1\20\3\0\1\20"+
    "\2\0\3\20\1\55\16\20\20\0\1\20\3\0\1\20"+
    "\2\0\14\20\1\56\5\20\20\0\1\20\3\0\1\20"+
    "\2\0\1\57\15\20\1\60\3\20\20\0\1\20\3\0"+
    "\1\20\2\0\7\20\1\61\12\20\20\0\1\20\3\0"+
    "\1\20\2\0\1\20\1\62\16\20\1\63\1\20\20\0"+
    "\1\20\3\0\1\20\2\0\3\20\1\64\16\20\20\0"+
    "\1\20\3\0\1\20\2\0\7\20\1\65\12\20\21\0"+
    "\1\66\34\0\1\40\62\0\1\67\104\0\1\70\42\0"+
    "\1\71\26\0\1\72\45\0\1\20\3\0\1\20\2\0"+
    "\20\20\1\73\1\20\20\0\1\20\3\0\1\20\2\0"+
    "\2\20\1\74\17\20\20\0\1\20\3\0\1\20\2\0"+
    "\15\20\1\75\4\20\20\0\1\20\3\0\1\20\2\0"+
    "\7\20\1\76\12\20\20\0\1\20\3\0\1\20\2\0"+
    "\4\20\1\77\15\20\20\0\1\20\3\0\1\20\2\0"+
    "\13\20\1\100\6\20\20\0\1\20\3\0\1\20\2\0"+
    "\1\20\1\101\14\20\1\102\3\20\20\0\1\20\3\0"+
    "\1\20\2\0\3\20\1\103\16\20\20\0\1\20\3\0"+
    "\1\20\2\0\5\20\1\104\14\20\20\0\1\20\3\0"+
    "\1\20\2\0\1\105\21\20\20\0\1\20\3\0\1\20"+
    "\2\0\1\106\21\20\20\0\1\20\3\0\1\20\2\0"+
    "\16\20\1\107\3\20\20\0\1\20\3\0\1\20\2\0"+
    "\20\20\1\110\1\20\32\0\1\111\36\0\1\20\3\0"+
    "\1\20\2\0\7\20\1\112\12\20\20\0\1\20\3\0"+
    "\1\20\2\0\3\20\1\113\16\20\20\0\1\20\3\0"+
    "\1\20\2\0\14\20\1\114\5\20\20\0\1\20\3\0"+
    "\1\20\2\0\20\20\1\115\1\20\20\0\1\20\3\0"+
    "\1\20\2\0\20\20\1\116\1\20\20\0\1\20\3\0"+
    "\1\20\2\0\1\117\17\20\1\120\1\20\20\0\1\20"+
    "\3\0\1\20\2\0\10\20\1\121\11\20\20\0\1\20"+
    "\3\0\1\20\2\0\17\20\1\122\2\20\20\0\1\20"+
    "\3\0\1\20\2\0\1\20\1\123\20\20\20\0\1\20"+
    "\3\0\1\20\2\0\6\20\1\124\13\20\20\0\1\20"+
    "\3\0\1\20\2\0\13\20\1\125\6\20\20\0\1\20"+
    "\3\0\1\20\2\0\16\20\1\126\3\20\20\0\1\20"+
    "\3\0\1\20\2\0\12\20\1\127\7\20\20\0\1\20"+
    "\3\0\1\20\2\0\6\20\1\130\13\20\30\0\1\131"+
    "\40\0\1\20\3\0\1\20\2\0\14\20\1\132\5\20"+
    "\20\0\1\20\3\0\1\20\2\0\16\20\1\133\3\20"+
    "\20\0\1\20\3\0\1\20\2\0\17\20\1\134\2\20"+
    "\20\0\1\20\3\0\1\20\2\0\3\20\1\135\16\20"+
    "\20\0\1\20\3\0\1\20\2\0\1\136\21\20\20\0"+
    "\1\20\3\0\1\20\2\0\3\20\1\137\16\20\20\0"+
    "\1\20\3\0\1\20\2\0\3\20\1\140\16\20\20\0"+
    "\1\20\3\0\1\20\2\0\20\20\1\141\1\20\20\0"+
    "\1\20\3\0\1\20\2\0\20\20\1\142\1\20\20\0"+
    "\1\20\3\0\1\20\2\0\7\20\1\143\12\20\20\0"+
    "\1\20\3\0\1\20\2\0\13\20\1\144\6\20\20\0"+
    "\1\20\3\0\1\20\2\0\20\20\1\145\1\20\20\0"+
    "\1\20\3\0\1\20\2\0\17\20\1\146\2\20\20\0"+
    "\1\20\3\0\1\20\2\0\16\20\1\147\3\20\20\0"+
    "\1\20\3\0\1\20\2\0\5\20\1\150\14\20\20\0"+
    "\1\20\3\0\1\20\2\0\16\20\1\151\3\20\20\0"+
    "\1\20\3\0\1\20\2\0\2\20\1\152\17\20\20\0"+
    "\1\20\3\0\1\20\2\0\13\20\1\153\6\20\20\0"+
    "\1\20\3\0\1\20\2\0\14\20\1\154\5\20\20\0"+
    "\1\20\3\0\1\20\2\0\12\20\1\155\7\20\20\0"+
    "\1\20\3\0\1\20\2\0\3\20\1\156\16\20\20\0"+
    "\1\20\3\0\1\20\2\0\3\20\1\157\16\20\20\0"+
    "\1\20\3\0\1\20\2\0\1\160\21\20\20\0\1\20"+
    "\3\0\1\20\2\0\1\20\1\161\20\20\20\0\1\20"+
    "\3\0\1\20\2\0\7\20\1\162\12\20\20\0\1\20"+
    "\3\0\1\20\2\0\13\20\1\163\6\20\20\0\1\20"+
    "\3\0\1\20\2\0\11\20\1\164\10\20\20\0\1\20"+
    "\3\0\1\20\2\0\13\20\1\165\6\20\20\0\1\20"+
    "\3\0\1\20\2\0\1\20\1\166\20\20\20\0\1\20"+
    "\3\0\1\20\2\0\1\167\21\20\20\0\1\20\3\0"+
    "\1\20\2\0\3\20\1\170\16\20\20\0\1\20\3\0"+
    "\1\20\2\0\11\20\1\171\10\20\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3526];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\1\1\5\11\2\1\1\11\1\1\2\11"+
    "\13\1\3\11\2\1\1\11\1\1\1\0\2\11\1\0"+
    "\15\1\3\11\1\0\1\11\16\1\1\0\17\1\1\11"+
    "\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CupLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 40: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 41: break;
          case 3:
            { return CupTypes.LPAREN;
            }
          // fall through
          case 42: break;
          case 4:
            { return CupTypes.RPAREN;
            }
          // fall through
          case 43: break;
          case 5:
            { return CupTypes.ASTERISK;
            }
          // fall through
          case 44: break;
          case 6:
            { return CupTypes.COMMA;
            }
          // fall through
          case 45: break;
          case 7:
            { return CupTypes.DOT;
            }
          // fall through
          case 46: break;
          case 8:
            { return CupTypes.COLON;
            }
          // fall through
          case 47: break;
          case 9:
            { return CupTypes.SEMICOLON;
            }
          // fall through
          case 48: break;
          case 10:
            { return CupTypes.IDENTIFIER;
            }
          // fall through
          case 49: break;
          case 11:
            { return CupTypes.LBRACKET;
            }
          // fall through
          case 50: break;
          case 12:
            { return CupTypes.RBRACKET;
            }
          // fall through
          case 51: break;
          case 13:
            { return CupTypes.BAR;
            }
          // fall through
          case 52: break;
          case 14:
            { return CupTypes.COMMENT;
            }
          // fall through
          case 53: break;
          case 15:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 54: break;
          case 16:
            { return CupTypes.CODE_STRING;
            }
          // fall through
          case 55: break;
          case 17:
            { yybegin(MULTILINE_COMMENT); return CupTypes.COMMENT;
            }
          // fall through
          case 56: break;
          case 18:
            { yybegin(SINGLE_LINE_COMMENT); return CupTypes.COMMENT;
            }
          // fall through
          case 57: break;
          case 19:
            { yybegin(CODE_STRING); return CupTypes.OPEN_CODE_STRING;
            }
          // fall through
          case 58: break;
          case 20:
            { yybegin(YYINITIAL); return CupTypes.COMMENT;
            }
          // fall through
          case 59: break;
          case 21:
            { yybegin(YYINITIAL); return CupTypes.CLOSE_CODE_STRING;
            }
          // fall through
          case 60: break;
          case 22:
            { return CupTypes.ASSIGN_OPERATOR;
            }
          // fall through
          case 61: break;
          case 23:
            { return CupTypes.NON;
            }
          // fall through
          case 62: break;
          case 24:
            { return CupTypes.CODE;
            }
          // fall through
          case 63: break;
          case 25:
            { return CupTypes.INIT;
            }
          // fall through
          case 64: break;
          case 26:
            { return CupTypes.LEFT;
            }
          // fall through
          case 65: break;
          case 27:
            { return CupTypes.SCAN;
            }
          // fall through
          case 66: break;
          case 28:
            { return CupTypes.WITH;
            }
          // fall through
          case 67: break;
          case 29:
            { return CupTypes.PERCENT_PREC;
            }
          // fall through
          case 68: break;
          case 30:
            { return CupTypes.RIGHT;
            }
          // fall through
          case 69: break;
          case 31:
            { return CupTypes.START;
            }
          // fall through
          case 70: break;
          case 32:
            { return CupTypes.ACTION;
            }
          // fall through
          case 71: break;
          case 33:
            { return CupTypes.IMPORT;
            }
          // fall through
          case 72: break;
          case 34:
            { return CupTypes.PARSER;
            }
          // fall through
          case 73: break;
          case 35:
            { return CupTypes.PACKAGE;
            }
          // fall through
          case 74: break;
          case 36:
            { return CupTypes.NONASSOC;
            }
          // fall through
          case 75: break;
          case 37:
            { return CupTypes.TERMINAL_;
            }
          // fall through
          case 76: break;
          case 38:
            { return CupTypes.PRECEDENCE;
            }
          // fall through
          case 77: break;
          case 39:
            { return CupTypes.NONTERMINAL;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
